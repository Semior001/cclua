-- pkgm: Package Manager for ComputerCraft
-- Usage: pkgm install <link to pkgm.lua file>
-- Made with Claude Code (https://claude.ai/code)

local args = { ... }
local command = args[1]
local target = args[2]

-- Helper function to parse URL into domain and path
local function parseUrl(url)
    local domain, path

    -- Strip protocol (http:// or https://)
    url = url:gsub("^https?://", "")

    -- Split into domain and path
    domain, path = url:match("([^/]+)(.*)")
    if not path or path == "" then
        path = "/"
    end

    return domain, path
end

-- Helper function to extract directory from URL path
local function getUrlDirectory(url)
    local urlPath = url:match("^https?://[^/]+(.*)$") or url
    return urlPath:match("(.+)/[^/]+$") or "/"
end

-- Helper function to get package name from URL path
local function getPackageNameFromUrl(url)
    local _, path = parseUrl(url)

    -- Extract the file name without extension from the URL
    local filename = path:match("([^/]+)%.lua$")

    -- If we have a pkgm.lua, use the parent directory name
    if filename == "pkgm" then
        local parentDir = path:match("([^/]+)/pkgm%.lua$")
        if parentDir then
            return parentDir
        end
    end

    -- Fallback to using the filename or a UUID
    return filename or os.getComputerID() .. "-" .. os.time()
end

-- Function to download a file from URL
local function download(url, path)
    print("Downloading " .. url .. " to " .. path)
    local response = http.get(url)
    if response then
        local file = fs.open(path, "w")
        file.write(response.readAll())
        file.close()
        response.close()
        return true
    else
        print("Failed to download " .. url)
        return false
    end
end

-- Creates or updates the PATH environment setup
local function setupPathEnvironment()
    local pathFile = "/pkgm/path.lua"
    local file = fs.open(pathFile, "w")
    file.writeLine("-- Generated by pkgm")
    file.writeLine("local oldPath = shell.path()")
    file.writeLine("local pkgmBin = \"/pkgm/bin\"")
    file.writeLine("if not string.find(oldPath, pkgmBin) then")
    file.writeLine("  shell.setPath(pkgmBin .. \":\" .. oldPath)")
    file.writeLine("end")
    file.close()

    -- Create bin directory if it doesn't exist
    fs.makeDir("/pkgm/bin")

    -- Ensure path script runs on startup
    if fs.exists("/startup.lua") then
        local startupFile = fs.open("/startup.lua", "r")
        local content = startupFile.readAll()
        startupFile.close()

        if not string.find(content, "shell%.run%(\"pkgm\", \"startup\"%)") then
            local startupFile = fs.open("/startup.lua", "a")
            startupFile.writeLine("\nshell.run(\"pkgm\", \"startup\")")
            startupFile.close()
        end
    else
        local startupFile = fs.open("/startup.lua", "w")
        startupFile.writeLine("shell.run(\"pkgm\", \"startup\")")
        startupFile.close()
    end
end

-- Install the pkgm program itself
local function installSelf()
    print("Installing pkgm...")
    fs.makeDir("/pkgm")

    -- Create necessary directories
    fs.makeDir("/pkgm/packages")
    fs.makeDir("/pkgm/bin")
    fs.makeDir("/pkgm/startup")

    -- Setup PATH environment
    setupPathEnvironment()

    -- Copy self to installation directory
    local file = fs.open(shell.getRunningProgram(), "r")
    local content = file.readAll()
    file.close()

    local dest = fs.open("/pkgm/pkgm.lua", "w")
    dest.write(content)
    dest.close()

    -- Create pkgm symlink in bin
    local symlinkFile = fs.open("/pkgm/bin/pkgm", "w")
    symlinkFile.writeLine("shell.run(\"/pkgm/pkgm.lua\", ...)")
    symlinkFile.close()

    -- Initialize package path
    shell.run("/pkgm/path.lua")

    print("pkgm installed successfully!")
    print("To use pkgm, restart the computer or run: shell.run(\"/pkgm/path.lua\")")
end

-- Create a symlink in bin directory for a package
local function createBinSymlink(name, packagePath, mainFile)
    local symlinkPath = "/pkgm/bin/" .. name
    local symlinkFile = fs.open(symlinkPath, "w")

    -- Create a script that runs the package's main file
    symlinkFile.writeLine("shell.run(\"" .. packagePath .. "/" .. mainFile .. "\", ...)")
    symlinkFile.close()

    print("Created command '" .. name .. "' in PATH")
end

-- Function to download files specified in the files mapping
local function downloadPackageFiles(packageInfo, packageDir, packageUrlBase)
    if not packageInfo.files or type(packageInfo.files) ~= "table" then
        print("Warning: No files specified in package definition")
        return true
    end

    -- Download all files specified in the package definition
    for localPath, fileInfo in pairs(packageInfo.files) do
        local fileUrl
        local fileContent

        if type(fileInfo) == "string" then
            -- Simple format: files = { ["path/file.lua"] = "url" }
            fileUrl = fileInfo
        elseif type(fileInfo) == "table" and fileInfo.url then
            -- Advanced format: files = { ["path/file.lua"] = { url = "url", executable = true } }
            fileUrl = fileInfo.url
        else
            print("Error: Invalid file definition for " .. localPath)
            return false
        end

        -- If the URL is relative (doesn't start with http), make it absolute
        if not fileUrl:match("^https?://") then
            -- If packageUrlBase doesn't end with a slash, add one
            if packageUrlBase:sub(-1) ~= "/" then
                packageUrlBase = packageUrlBase .. "/"
            end
            fileUrl = packageUrlBase .. fileUrl
        end

        -- Create directory structure for the file
        local fileDirPath = fs.getDir(packageDir .. "/" .. localPath)
        if fileDirPath ~= "" then
            fs.makeDir(fileDirPath)
        end

        -- Download the file
        if not download(fileUrl, packageDir .. "/" .. localPath) then
            print("Failed to download " .. fileUrl)
            return false
        end
    end

    return true
end

-- Function to install a package from a pkgm.lua file
local function installPackage(packageUrl)
    print("Installing package from " .. packageUrl)

    -- Parse URL to determine storage structure
    local domain, urlPath = parseUrl(packageUrl)
    local urlDirPath = urlPath:match("(.*)/[^/]+%.lua$") or "/"
    local baseUrl = packageUrl:match("(.+)/[^/]+$") or ""
    local suggestedName = getPackageNameFromUrl(packageUrl)

    -- Download the package definition file
    local tempPath = "/pkgm/temp.lua"
    if not download(packageUrl, tempPath) then
        return false
    end

    -- Load and execute the package definition
    local packageDef = loadfile(tempPath)
    if packageDef then
        local success, packageInfo = pcall(packageDef)
        if success and type(packageInfo) == "table" then
            -- Get package information
            local name = packageInfo.name or suggestedName
            local version = packageInfo.version or "0.0.0"

            print("Installing " .. name .. " v" .. version)

            -- Create package directory structure that mirrors URL path
            local packageBasePath = "/pkgm/packages/" .. domain
            local packageDir = packageBasePath .. urlDirPath

            fs.makeDir(packageDir)

            -- Save package info
            local infoFile = fs.open(packageDir .. "/info.lua", "w")
            infoFile.writeLine("return {")
            infoFile.writeLine("  name = \"" .. name .. "\",")
            infoFile.writeLine("  version = \"" .. version .. "\",")
            infoFile.writeLine("  url = \"" .. packageUrl .. "\",")
            infoFile.writeLine("  domain = \"" .. domain .. "\",")
            infoFile.writeLine("  path = \"" .. urlDirPath .. "\",")
            infoFile.writeLine("}")
            infoFile.close()

            -- Copy the package definition
            fs.copy(tempPath, packageDir .. "/pkgm.lua")

            -- Download files specified in the package definition
            if not downloadPackageFiles(packageInfo, packageDir, baseUrl) then
                print("Error downloading package files")
                return false
            end

            -- For backward compatibility, run the install function if it exists
            if type(packageInfo.install) == "function" then
                print("Running legacy install script...")
                local installSuccess, installError = pcall(packageInfo.install, packageDir)
                if not installSuccess then
                    print("Error during installation: " .. tostring(installError))
                    return false
                end
            end

            -- Create an executable for the package
            if packageInfo.main then
                -- For packages with a main file
                createBinSymlink(name, packageDir, packageInfo.main)
            elseif type(packageInfo.run) == "function" then
                -- For packages with a run function (legacy support)
                local runScript = [[
local args = {...}
local pkg = loadfile("PACKAGE_DIR/pkgm.lua")()
return pkg.run(unpack(args))
        ]]
                runScript = runScript:gsub("PACKAGE_DIR", packageDir)

                fs.makeDir(packageDir .. "/bin")
                local runFile = fs.open(packageDir .. "/bin/run.lua", "w")
                runFile.write(runScript)
                runFile.close()

                createBinSymlink(name, packageDir .. "/bin", "run.lua")
            end

            fs.delete(tempPath)
            print(name .. " installed successfully!")
            return true
        else
            print("Invalid package definition")
            return false
        end
    else
        print("Failed to load package definition")
        return false
    end
end

-- Function to handle startup tasks
local function handleStartup()
    -- Run PATH setup
    if fs.exists("/pkgm/path.lua") then
        shell.run("/pkgm/path.lua")
    end

    -- Run startup scripts
    if fs.exists("/pkgm/startup") then
        local startupFiles = fs.list("/pkgm/startup")
        for _, file in ipairs(startupFiles) do
            if file:match("%.lua$") then
                shell.run("/pkgm/startup/" .. file)
            end
        end
    end
end

-- Function to get all installed packages
local function getAllPackages()
    local allPackages = {}

    -- Walk through the packages directory structure
    local function scanDir(dir, basePath)
        if not fs.exists(dir) then return end

        local items = fs.list(dir)
        for _, item in ipairs(items) do
            local path = dir .. "/" .. item
            if fs.isDir(path) then
                scanDir(path, basePath .. "/" .. item)
            elseif item == "info.lua" then
                local infoPath = dir .. "/" .. item
                local success, info = pcall(function() return loadfile(infoPath)() end)
                if success and info then
                    table.insert(allPackages, {
                        name = info.name,
                        version = info.version,
                        path = dir,
                        url = info.url
                    })
                end
            end
        end
    end

    scanDir("/pkgm/packages", "")
    return allPackages
end

-- Function to list all installed packages
local function listPackages()
    print("Installed packages:")

    local allPackages = getAllPackages()

    if #allPackages == 0 then
        print("No packages installed")
    else
        for _, pkg in ipairs(allPackages) do
            print("- " .. pkg.name .. " (v" .. pkg.version .. ")")
            print("  URL: " .. pkg.url)
            print("  Path: " .. pkg.path)
            print("")
        end
    end
end

-- Function to remove a package
local function removePackage(name)
    print("Removing package: " .. name)

    local removed = false

    -- Search for package by name
    local function searchAndRemove(dir)
        if not fs.exists(dir) then return false end

        local items = fs.list(dir)
        for _, item in ipairs(items) do
            local path = dir .. "/" .. item
            if fs.isDir(path) then
                if searchAndRemove(path) then
                    return true
                end
            elseif item == "info.lua" then
                -- Check if this is the package we're looking for
                local infoPath = dir .. "/" .. item
                local success, info = pcall(function() return loadfile(infoPath)() end)
                if success and info and info.name == name then
                    -- Remove the package directory
                    fs.delete(dir)
                    -- Remove the bin symlink
                    if fs.exists("/pkgm/bin/" .. name) then
                        fs.delete("/pkgm/bin/" .. name)
                    end
                    return true
                end
            end
        end
        return false
    end

    removed = searchAndRemove("/pkgm/packages")

    if removed then
        print(name .. " removed successfully")
    else
        print("Package not found: " .. name)
    end

    return removed
end

-- Function to upgrade a package with a given name
local function upgradePackage(name, url)
    print("Upgrading package: " .. name)

    if removePackage(name) then
        if url then
            return installPackage(url)
        else
            print("Package URL not found. Cannot upgrade.")
            return false
        end
    else
        return false
    end
end

-- Function to upgrade all packages or a specific package
local function upgradePackages(specificPackage)
    if specificPackage then
        -- Check if specificPackage is a URL
        if specificPackage:match("^https?://") then
            local packageName = getPackageNameFromUrl(specificPackage)
            return upgradePackage(packageName, specificPackage)
        end

        -- Upgrade a specific package
        local found = false

        -- Find the package info
        local allPackages = getAllPackages()
        for _, pkg in ipairs(allPackages) do
            if pkg.name == specificPackage then
                print("Upgrading " .. pkg.name .. " from " .. pkg.url)
                upgradePackage(pkg.name, pkg.url)
                found = true
                break
            end
        end

        if not found then
            print("Package not found: " .. specificPackage)
            return false
        end
    else
        -- Upgrade all packages
        local allPackages = getAllPackages()

        if #allPackages == 0 then
            print("No packages installed")
            return false
        end

        print("Upgrading all packages...")
        local upgradeCount = 0

        for _, pkg in ipairs(allPackages) do
            print("\nUpgrading " .. pkg.name .. " from " .. pkg.url)
            if upgradePackage(pkg.name, pkg.url) then
                upgradeCount = upgradeCount + 1
            end
        end

        print("\nUpgraded " .. upgradeCount .. " of " .. #allPackages .. " packages")
    end

    return true
end

-- Create necessary directories
fs.makeDir("/pkgm")
fs.makeDir("/pkgm/packages")
fs.makeDir("/pkgm/bin")
fs.makeDir("/pkgm/startup")

-- Ensure PATH is set up
if not fs.exists("/pkgm/path.lua") then
    setupPathEnvironment()
end

-- Main command processor
if command == "install" then
    if target then
        installPackage(target)
    else
        print("Usage: pkgm install <url>")
    end
elseif command == "upgrade" then
    -- Upgrade a specific package or all packages
    upgradePackages(target)
elseif command == "list" then
    listPackages()
elseif command == "remove" or command == "uninstall" then
    if target then
        removePackage(target)
    else
        print("Usage: pkgm remove <package>")
    end
elseif command == "path" then
    -- Manually run the PATH setup script
    if fs.exists("/pkgm/path.lua") then
        shell.run("/pkgm/path.lua")
        print("PATH updated to include /pkgm/bin")
    else
        setupPathEnvironment()
        shell.run("/pkgm/path.lua")
        print("PATH environment created and updated")
    end
elseif command == "help" then
    print("pkgm - Package Manager for ComputerCraft")
    print("Commands:")
    print("  install <url>    - Install a package from URL")
    print("  upgrade [pkg]    - Upgrade all packages or a specific package")
    print("  list            - List installed packages")
    print("  remove <package> - Remove an installed package")
    print("  path            - Update PATH to include pkgm binaries")
    print("  help            - Show this help")
elseif command == "startup" then
    handleStartup()
elseif command == nil then
    -- Self-installation mode
    installSelf()
else
    print("Unknown command: " .. (command or ""))
    print("Run 'pkgm help' for usage information")
end
