-- pkgm: Package Manager for ComputerCraft
-- Usage: pkgm install <link to pkgm.lua file>

local args = {...}
local command = args[1]
local target = args[2]

-- Helper function to parse URL into domain and path
local function parseUrl(url)
  local domain, path
  
  -- Strip protocol (http:// or https://)
  url = url:gsub("^https?://", "")
  
  -- Split into domain and path
  domain, path = url:match("([^/]+)(.*)")
  if not path or path == "" then
    path = "/"
  end
  
  return domain, path
end

-- Helper function to get package name from URL path
local function getPackageNameFromUrl(url)
  local _, path = parseUrl(url)
  
  -- Extract the file name without extension from the URL
  local filename = path:match("([^/]+)%.lua$")
  
  -- If we have a pkgm.lua, use the parent directory name
  if filename == "pkgm" then
    local parentDir = path:match("([^/]+)/pkgm%.lua$")
    if parentDir then
      return parentDir
    end
  end
  
  -- Fallback to using the filename or a UUID
  return filename or os.getComputerID() .. "-" .. os.time()
end

-- Function to download a file from URL
local function download(url, path)
  print("Downloading " .. url .. " to " .. path)
  local response = http.get(url)
  if response then
    local file = fs.open(path, "w")
    file.write(response.readAll())
    file.close()
    response.close()
    return true
  else
    print("Failed to download " .. url)
    return false
  end
end

-- Creates or updates the PATH environment setup
local function setupPathEnvironment()
  local pathFile = "/pkgm/path.lua"
  local file = fs.open(pathFile, "w")
  file.writeLine("-- Generated by pkgm")
  file.writeLine("local oldPath = shell.path()")
  file.writeLine("local pkgmBin = \"/pkgm/bin\"")
  file.writeLine("if not string.find(oldPath, pkgmBin) then")
  file.writeLine("  shell.setPath(pkgmBin .. \":\" .. oldPath)")
  file.writeLine("end")
  file.close()
  
  -- Create bin directory if it doesn't exist
  fs.makeDir("/pkgm/bin")
  
  -- Ensure path script runs on startup
  if fs.exists("/startup.lua") then
    local startupFile = fs.open("/startup.lua", "r")
    local content = startupFile.readAll()
    startupFile.close()
    
    if not string.find(content, "shell.run%(\"pkgm\", \"startup\")") then
      local startupFile = fs.open("/startup.lua", "a")
      startupFile.writeLine("\nshell.run(\"pkgm\", \"startup\")")
      startupFile.close()
    end
  else
    local startupFile = fs.open("/startup.lua", "w")
    startupFile.writeLine("shell.run(\"pkgm\", \"startup\")")
    startupFile.close()
  end
end

-- Install the pkgm program itself
local function installSelf()
  print("Installing pkgm...")
  fs.makeDir("/pkgm")
  
  -- Create necessary directories
  fs.makeDir("/pkgm/packages")
  fs.makeDir("/pkgm/bin")
  fs.makeDir("/pkgm/startup")
  
  -- Setup PATH environment
  setupPathEnvironment()
  
  -- Copy self to installation directory
  local file = fs.open(shell.getRunningProgram(), "r")
  local content = file.readAll()
  file.close()
  
  local dest = fs.open("/pkgm/pkgm.lua", "w")
  dest.write(content)
  dest.close()
  
  -- Create pkgm symlink in bin
  local symlinkFile = fs.open("/pkgm/bin/pkgm", "w")
  symlinkFile.writeLine("shell.run(\"/pkgm/pkgm.lua\", ...)")
  symlinkFile.close()
  
  -- Initialize package path
  shell.run("/pkgm/path.lua")
  
  print("pkgm installed successfully!")
  print("To use pkgm, restart the computer or run: shell.run(\"/pkgm/path.lua\")")
end

-- Create a symlink in bin directory for a package
local function createBinSymlink(name, packagePath, mainFile)
  local symlinkPath = "/pkgm/bin/" .. name
  local symlinkFile = fs.open(symlinkPath, "w")
  
  -- Create a script that runs the package's main file
  symlinkFile.writeLine("shell.run(\"" .. packagePath .. "/" .. mainFile .. "\", ...)")
  symlinkFile.close()
  
  print("Created command '" .. name .. "' in PATH")
end

-- Function to install a package from a pkgm.lua file
local function installPackage(packageUrl)
  print("Installing package from " .. packageUrl)
  
  -- Parse URL to determine storage structure
  local domain, urlPath = parseUrl(packageUrl)
  local urlDirPath = urlPath:match("(.*)/[^/]+%.lua$") or "/"
  local suggestedName = getPackageNameFromUrl(packageUrl)
  
  -- Download the package definition file
  local tempPath = "/pkgm/temp.lua"
  if not download(packageUrl, tempPath) then
    return false
  end
  
  -- Load and execute the package definition
  local packageDef = loadfile(tempPath)
  if packageDef then
    local success, packageInfo = pcall(packageDef)
    if success and type(packageInfo) == "table" then
      -- Get package information
      local name = packageInfo.name or suggestedName
      local version = packageInfo.version or "0.0.0"
      
      print("Installing " .. name .. " v" .. version)
      
      -- Create package directory structure that mirrors URL path
      local packageBasePath = "/pkgm/packages/" .. domain
      local packageDir = packageBasePath .. urlDirPath
      
      fs.makeDir(packageDir)
      
      -- Save package info
      local infoFile = fs.open(packageDir .. "/info.lua", "w")
      infoFile.writeLine("return {")
      infoFile.writeLine("  name = \"" .. name .. "\",")
      infoFile.writeLine("  version = \"" .. version .. "\",")
      infoFile.writeLine("  url = \"" .. packageUrl .. "\",")
      infoFile.writeLine("  domain = \"" .. domain .. "\",")
      infoFile.writeLine("  path = \"" .. urlDirPath .. "\",")
      infoFile.writeLine("}")
      infoFile.close()
      
      -- Copy the package definition
      fs.copy(tempPath, packageDir .. "/pkgm.lua")
      
      -- Run the install function if it exists
      if type(packageInfo.install) == "function" then
        print("Running install script...")
        local installSuccess, installError = pcall(packageInfo.install, packageDir)
        if not installSuccess then
          print("Error during installation: " .. tostring(installError))
          return false
        end
      end
      
      -- Create an executable for the package
      if type(packageInfo.run) == "function" or packageInfo.main then
        -- Create a run script
        local runScript
        if type(packageInfo.run) == "function" then
          -- For packages with a run function
          runScript = [[
local args = {...}
local pkg = loadfile("PACKAGE_DIR/pkgm.lua")()
return pkg.run(unpack(args))
          ]]
          runScript = runScript:gsub("PACKAGE_DIR", packageDir)
          
          fs.makeDir(packageDir .. "/bin")
          local runFile = fs.open(packageDir .. "/bin/run.lua", "w")
          runFile.write(runScript)
          runFile.close()
          
          createBinSymlink(name, packageDir .. "/bin", "run.lua")
        elseif packageInfo.main then
          -- For packages with a main file
          createBinSymlink(name, packageDir, packageInfo.main)
        end
      end
      
      fs.delete(tempPath)
      print(name .. " installed successfully!")
      return true
    else
      print("Invalid package definition")
      return false
    end
  else
    print("Failed to load package definition")
    return false
  end
end

-- Function to handle startup tasks
local function handleStartup()
  -- Run PATH setup
  if fs.exists("/pkgm/path.lua") then
    shell.run("/pkgm/path.lua")
  end
  
  -- Run startup scripts
  if fs.exists("/pkgm/startup") then
    local startupFiles = fs.list("/pkgm/startup")
    for _, file in ipairs(startupFiles) do
      if file:match("%.lua$") then
        shell.run("/pkgm/startup/" .. file)
      end
    end
  end
end

-- Function to list all installed packages
local function listPackages()
  print("Installed packages:")
  
  local allPackages = {}
  
  -- Walk through the packages directory structure
  local function scanDir(dir, basePath)
    if not fs.exists(dir) then return end
    
    local items = fs.list(dir)
    for _, item in ipairs(items) do
      local path = dir .. "/" .. item
      if fs.isDir(path) then
        scanDir(path, basePath .. "/" .. item)
      elseif item == "info.lua" then
        local infoPath = dir .. "/" .. item
        local success, info = pcall(function() return loadfile(infoPath)() end)
        if success and info then
          table.insert(allPackages, {
            name = info.name,
            version = info.version,
            path = dir,
            url = info.url
          })
        end
      end
    end
  end
  
  scanDir("/pkgm/packages", "")
  
  if #allPackages == 0 then
    print("No packages installed")
  else
    for _, pkg in ipairs(allPackages) do
      print("- " .. pkg.name .. " (v" .. pkg.version .. ")")
      print("  URL: " .. pkg.url)
      print("  Path: " .. pkg.path)
      print("")
    end
  end
end

-- Function to remove a package
local function removePackage(name)
  print("Removing package: " .. name)
  
  local removed = false
  
  -- Search for package by name
  local function searchAndRemove(dir)
    if not fs.exists(dir) then return false end
    
    local items = fs.list(dir)
    for _, item in ipairs(items) do
      local path = dir .. "/" .. item
      if fs.isDir(path) then
        if searchAndRemove(path) then
          return true
        end
      elseif item == "info.lua" then
        -- Check if this is the package we're looking for
        local infoPath = dir .. "/" .. item
        local success, info = pcall(function() return loadfile(infoPath)() end)
        if success and info and info.name == name then
          -- Remove the package directory
          fs.delete(dir)
          -- Remove the bin symlink
          if fs.exists("/pkgm/bin/" .. name) then
            fs.delete("/pkgm/bin/" .. name)
          end
          return true
        end
      end
    end
    return false
  end
  
  removed = searchAndRemove("/pkgm/packages")
  
  if removed then
    print(name .. " removed successfully")
  else
    print("Package not found: " .. name)
  end
  
  return removed
end

-- Create necessary directories
fs.makeDir("/pkgm")
fs.makeDir("/pkgm/packages")
fs.makeDir("/pkgm/bin")
fs.makeDir("/pkgm/startup")

-- Ensure PATH is set up
if not fs.exists("/pkgm/path.lua") then
  setupPathEnvironment()
end

-- Main command processor
if command == "install" then
  if target then
    installPackage(target)
  else
    print("Usage: pkgm install <url>")
  end
elseif command == "update" then
  if target then
    print("Updating " .. target)
    -- First try to find and remove the package
    if removePackage(target) then
      -- Then find the info file to get the URL
      -- Since we've removed it, we need to look for a cached URL
      local packageUrl = target -- Default to assuming target is a URL
      
      -- If it's not a URL, try to find a cached info file
      if not target:match("^https?://") and fs.exists("/pkgm/cache/" .. target .. ".url") then
        local urlFile = fs.open("/pkgm/cache/" .. target .. ".url", "r")
        packageUrl = urlFile.readAll()
        urlFile.close()
      end
      
      -- Install the package
      if packageUrl then
        installPackage(packageUrl)
      else
        print("Package URL not found. Please provide the URL:")
        print("pkgm install <url>")
      end
    end
  else
    print("Usage: pkgm update <package>")
  end
elseif command == "list" then
  listPackages()
elseif command == "remove" or command == "uninstall" then
  if target then
    removePackage(target)
  else
    print("Usage: pkgm remove <package>")
  end
elseif command == "path" then
  -- Manually run the PATH setup script
  if fs.exists("/pkgm/path.lua") then
    shell.run("/pkgm/path.lua")
    print("PATH updated to include /pkgm/bin")
  else
    setupPathEnvironment()
    shell.run("/pkgm/path.lua")
    print("PATH environment created and updated")
  end
elseif command == "help" then
  print("pkgm - Package Manager for ComputerCraft")
  print("Commands:")
  print("  install <url>    - Install a package from URL")
  print("  update <package> - Update an installed package")
  print("  list            - List installed packages")
  print("  remove <package> - Remove an installed package")
  print("  path            - Update PATH to include pkgm binaries")
  print("  help            - Show this help")
elseif command == "startup" then
  handleStartup()
elseif command == nil then
  -- Self-installation mode
  installSelf()
else
  print("Unknown command: " .. (command or ""))
  print("Run 'pkgm help' for usage information")
end